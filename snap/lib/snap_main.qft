<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="4.1.1">
  <include>qfs.qft</include>
  <include>snap_do_click.qft</include>
  <include>snap_check.qft</include>
  <include>snap_export.qft</include>
  <include>snap_import.qft</include>
  <include>snap_placemark.qft</include>
  <include>snap_vector_data.qft</include>
  <include>snap_get.qft</include>
  <include>snap_select.qft</include>
  <include>snap_set.qft</include>
  <include>snap_wait.qft</include>
  <include>snap_workflow.qft</include>
  <include>snap_save.qft</include>
  <include>../../shared/gpt.qft</include>
  <include>../../shared/shared_lib.qft</include>
  <include>../../shared/variables.qft</include>
  <include>../01_reader/reader.qft</include>
  <include>../02_analysis_tools/analysis_lib.qft</include>
  <include>../03_tools/tools_lib.qft</include>
  <include>../04_edit/edit_lib.qft</include>
  <include>../06_imaging_tools/imaging_lib.qft</include>
  <include>../10_processing/lib/processing_main.qft</include>
  <include>../10_processing/lib/c2r_cc_lib.qft</include>
  <include>../15_smos_box/smosbox_lib.qft</include>
  <include>../16_time_series/snap_time_series_lib.qft</include>
  <include>../40_gpt/gpt_main.qft</include>
  <dependency>snap_check.qft</dependency>
  <dependency>snap_close.qft</dependency>
  <dependency>snap_do_click.qft</dependency>
  <dependency>snap_export.qft</dependency>
  <dependency>snap_get.qft</dependency>
  <dependency>snap_import.qft</dependency>
  <dependency>snap_open.qft</dependency>
  <dependency>snap_placemark.qft</dependency>
  <dependency>snap_save.qft</dependency>
  <dependency>snap_select.qft</dependency>
  <dependency>snap_set.qft</dependency>
  <dependency>snap_vector_data.qft</dependency>
  <dependency>snap_wait.qft</dependency>
  <dependency>snap_workflow.qft</dependency>
  <dependency>../../shared/shared_lib.qft</dependency>
  <dependency>../../variables/lib.qft</dependency>
  <dependency>../01_reader/reader.qft</dependency>
  <dependency>../02_analysis_tools/analysis_lib.qft</dependency>
  <dependency>../03_tools/tools_lib.qft</dependency>
  <dependency>../04_edit/edit_lib.qft</dependency>
  <dependency>../06_imaging_tools/imaging_lib.qft</dependency>
  <dependency>../10_processing/lib/processing_main.qft</dependency>
  <dependency>../10_processing/lib/c2r_cc_lib.qft</dependency>
  <dependency>../15_smos_box/smosbox_lib.qft</dependency>
  <dependency>../16_time_series/snap_time_series_lib.qft</dependency>
  <dependency>../40_gpt/gpt_main.qft</dependency>
  <variable name="client">snap</variable>
  <PackageRoot id="_3">
    <comment>snap</comment>
    <Package id="_1l8u" name="dependencies">
      <Dependency id="_1lWZ" name="start_application">
        <SetupSequence id="_1lWa" name="start">
          <ProcedureCall id="_1lWb" procedure="start.snap.application"/>
        </SetupSequence>
        <CleanupSequence id="_1lWc" name="exit">
          <ProcedureCall id="_1lEv" procedure="stop.exit_snap"/>
        </CleanupSequence>
        <ErrorHandler id="_1pEk" name="clientNotConnectedException">
          <comment>If client 'snap' did not connect, start SNAP.</comment>
          <ProcedureCall id="_1pFD"
                         procedure="start.snap.check_already_started_else_start_SNAP"/>
        </ErrorHandler>
        <CatchSequence exception="TestException" id="_1pEv" maxerror="0">
          <ProcedureCall id="_1pFE"
                         procedure="start.snap.check_already_started_else_start_SNAP"/>
        </CatchSequence>
      </Dependency>
      <Dependency id="_1oP4" name="start_SUT_for_gpt_tests">
        <SetupSequence id="_1l4Y" name="start_snap">
          <ProcedureCall id="_1p00" procedure="set.variable.client_snap"/>
          <TryStep id="_1o-y" name="already started?">
            <ClientWaiter client="$(client)" id="_1o-+" timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1o--"
                           maxerror="0" name="not start -&gt; start">
              <ProcedureCall id="_1p01" procedure="start.snap.application"/>
              <ProcedureCall id="_1l4Z"
                             procedure="preparation.environment_for_gpt_test">
                <variable name="out_dir">$(data_out_dir)</variable>
              </ProcedureCall>
            </CatchSequence>
          </TryStep>
        </SetupSequence>
        <CleanupSequence id="_8" name="exit_snap">
          <ProcedureCall id="_1p02" procedure="stop.exit_snap"/>
        </CleanupSequence>
      </Dependency>
    </Package>
    <Package id="_1lBD" name="resize">
      <Procedure id="_1pFJ" name="dialog">
        <IfSequence id="_1pFK" test="${qftest:windows}">
          <TryStep id="_1rlZ">
            <ComponentEventStep client="$(client)" component="dialog"
                                event="COMPONENT_RESIZED" id="_1rlH"
                                param1="1000" param2="390"/>
            <ComponentEventStep client="$(client)" component="dialog"
                                event="COMPONENT_RESIZED" id="_1rlY"
                                param1="1000" param2="726"/>
            <CatchSequence exception="TestException" id="_1rla" maxerror="0"/>
          </TryStep>
          <ElseifSequence id="_1pFL" name="MAC?"
                          test="'${system:os.name}' .find('Mac OS X')&gt;=0"/>
          <ElseSequence id="_1pFM"/>
        </IfSequence>
      </Procedure>
      <Procedure id="_1l6h" name="product_view_panel">
        <IfSequence id="_1opA" test="${qftest:windows}">
          <ElseifSequence id="_1opB" name="MAC?"
                          test="'${system:os.name}' .find('Mac OS X')&gt;=0"/>
          <ElseSequence id="_1opC"/>
        </IfSequence>
      </Procedure>
      <Procedure id="_1l1q" name="import_dialog">
        <ComponentEventStep client="$(client)"
                            component="dialogESA_S-3_Toolbox_-_Import_ENVISAT_Product"
                            event="COMPONENT_RESIZED" id="_1l1r" param1="887"
                            param2="438"/>
      </Procedure>
    </Package>
    <Package id="_1kwL" name="start">
      <Package id="_1kwM" name="snap">
        <Procedure id="_1pF3" name="check_already_started_else_start_SNAP">
          <ProcedureCall id="_1pF5" procedure="set.variable.client_snap"/>
          <TryStep id="_1pF4" name="already started?">
            <ClientWaiter client="$(client)" id="_1pF6" timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1pF7"
                           maxerror="0" name="not start -&gt; start">
              <TryStep id="_1pF8">
                <ProcedureCall id="_1pF9" procedure="start.snap.client_snap"/>
                <CatchSequence exception="TestException" id="_1pFA"
                               maxerror="0">
                  <ProcedureCall id="_1pFB"
                                 procedure="utils.terminate_process">
                    <variable name="client_name">$(client)</variable>
                  </ProcedureCall>
                  <ProcedureCall id="_1pFC"
                                 procedure="start.snap.client_snap"/>
                </CatchSequence>
              </TryStep>
            </CatchSequence>
          </TryStep>
        </Procedure>
        <Procedure id="_1oGf" name="client_snap">
          <comment>@teststep Start SNAP.
</comment>
          <BasicSequence id="_1oJA" name="start_try">
            <TryStep id="_1oIQ">
              <ClientWaiter client="$(client)" id="_1oIM" timeout="0"/>
              <CatchSequence exception="TestException" id="_1oIR"
                             maxerror="0">
                <ProcedureCall id="_1oJJ" procedure="utils.terminate_process">
                  <variable name="client_name">$(client)</variable>
                </ProcedureCall>
                <IfSequence id="_1oOB" test="${qftest:windows}">
                  <SetGlobalStep id="_1oOA" varname="start">
                    <default>${path:snap_working_directory}\\bin\\snap64.exe</default>
                  </SetGlobalStep>
                  <SUTClientStarter client="$(client)"
                                    directory="${path:snap_working_directory}"
                                    executable="$(start)" id="_1p0V"/>
                  <ElseifSequence id="_1pFG" name="MAC?"
                                  test="'${system:os.name}' .find('Mac OS X')&gt;=0">
                    <SetGlobalStep id="_1pFH" varname="start">
                      <default>${path:snap_working_directory}/bin/snap</default>
                    </SetGlobalStep>
                    <ShellClientStarter client="$(client)" command="$(start)"
                                        directory="${path:snap_working_directory}"
                                        id="_1pFI"/>
                  </ElseifSequence>
                  <ElseSequence id="_1oOD">
                    <SetGlobalStep id="_1oOE" varname="start">
                      <default>${path:snap_working_directory}/bin/snap</default>
                    </SetGlobalStep>
                    <ShellClientStarter client="$(client)" command="$(start)"
                                        directory="${path:snap_working_directory}"
                                        id="_1mfG" postdelay="1000"/>
                  </ElseSequence>
                </IfSequence>
                <ClientWaiter client="$(client)" id="_1p0W" postdelay="500"/>
                <ProcedureCall id="_1pEj"
                               procedure="error_handling.if_SNAP_Error_shoot_error_message"/>
              </CatchSequence>
            </TryStep>
          </BasicSequence>
        </Procedure>
        <Procedure id="_1kwN" name="application">
          <ProcedureCall id="_1kyB" procedure="cleanup.global_variables"/>
          <ProcedureCall id="_1kwS" procedure="set.variable.client_snap"/>
          <ProcedureCall id="_1kwT" procedure="path.main_path"/>
          <ProcedureCall id="_1pFF"
                         procedure="start.snap.check_already_started_else_start_SNAP"/>
          <TryStep id="_1oJN" name="started?">
            <ClientWaiter client="$(client)" id="_1kwQ"/>
            <CatchSequence exception="TestException" id="_1oJO" maxerror="0">
              <ServerScriptStep id="_1oJP" name="error">
                <code>rc.logError("SNAP is not started")</code>
              </ServerScriptStep>
            </CatchSequence>
          </TryStep>
          <TryStep id="_1rv4" name="constructed gui?">
            <MouseEventStep clicks="1" client="$(client)"
                            component="NbMainWindow.Tab_Displayer"
                            event="MOUSE_MPRC" id="_1rxz" modifiers="16" x="8"
                            y="8"/>
            <CatchSequence exception="TestException" id="_1rvP" maxerror="0">
              <TryStep id="_1rx-" name="constructed gui?" predelay="2000">
                <ComponentWaiter client="$(client)"
                                 component="NbMainWindow.Tab_Displayer"
                                 errorlevel="0" id="_1ry5" predelay="2000"
                                 raise="false"/>
                <MouseEventStep clicks="1" client="$(client)"
                                component="NbMainWindow.Tab_Displayer"
                                event="MOUSE_MPRC" id="_1ry0" modifiers="16"
                                x="8" y="8"/>
                <CatchSequence exception="TestException" id="_1ry2"
                               maxerror="0">
                  <TryStep id="_1ry6" name="constructed gui?" predelay="2000">
                    <ComponentWaiter client="$(client)"
                                     component="NbMainWindow.Tab_Displayer"
                                     errorlevel="0" id="_1ry7" raise="false"/>
                    <MouseEventStep clicks="1" client="$(client)"
                                    component="NbMainWindow.Tab_Displayer"
                                    event="MOUSE_MPRC" id="_1ry8"
                                    modifiers="16" x="8" y="8"/>
                    <CatchSequence exception="TestException" id="_1ry9"
                                   maxerror="0">
                      <ProcedureCall id="_1ryA"
                                     procedure="run-log.make_screensot">
                        <variable name="iw_name">GUI_is_not_constructed</variable>
                        <variable name="iw_name_example">error_dialog</variable>
                      </ProcedureCall>
                      <ServerScriptStep id="_1ryB" name="error">
                        <code>rc.logError("GUI is not constructed")</code>
                      </ServerScriptStep>
                    </CatchSequence>
                  </TryStep>
                </CatchSequence>
              </TryStep>
            </CatchSequence>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
    <Package id="_1kwX" name="stop">
      <Procedure id="_1kxN" name="exit_snap">
        <TryStep id="_1oMa" name="select_menu_Exit">
          <IfSequence id="_1l4f" test="${qftest:windows}">
            <ProcedureCall id="_1kxO" procedure="do_click.menu.file"/>
            <ProcedureCall id="_1kxP" procedure="do_click.menu.file.exit"/>
            <ElseifSequence id="_1l4h" name="MAC?"
                            test="'${system:os.name}' .find('Mac OS X')&gt;=0">
              <ProcedureCall id="_1l4z" procedure="utils.terminate_process">
                <variable name="client_name">$(client)</variable>
              </ProcedureCall>
            </ElseifSequence>
            <ElseSequence id="_1l4k">
              <ProcedureCall id="_1oMd" procedure="do_click.menu.file"/>
              <ProcedureCall id="_1oMe" procedure="do_click.menu.file.exit"/>
            </ElseSequence>
          </IfSequence>
          <CatchSequence exception="TestException" id="_1oMb" maxerror="0">
            <ProcedureCall id="_1oIH" procedure="utils.terminate_process">
              <variable name="client_name">$(client)</variable>
            </ProcedureCall>
          </CatchSequence>
        </TryStep>
        <TryStep id="_1oMm" name="click_No_in_Confirm_dialog">
          <ProcedureCall id="_1oMn"
                         procedure="do_click.confirm_dialog.buttonNo"/>
          <CatchSequence exception="TestException" id="_1oMo" maxerror="0"/>
        </TryStep>
        <ProcedureCall id="_1oMp" procedure="utils.terminate_process">
          <variable name="client_name">$(client)</variable>
        </ProcedureCall>
      </Procedure>
    </Package>
    <Package id="_1rlb" name="deadlock">
      <Procedure id="_1ruS" name="handle_deadlock">
        <comment>@teststep Check if SNAP went into a deadlock, else restart.</comment>
        <TryStep id="_1ru8">
          <ProcedureCall id="_1ruQ" procedure="do_click.menu.help"/>
          <ProcedureCall id="_1ru+" procedure="do_click.menu.help.about"/>
          <ComponentWaiter client="$(client)" component="dialogAbout_SNAP"
                           id="_1rtk" timeout="1000"/>
          <WindowEventStep client="$(client)" component="dialogAbout_SNAP"
                           event="WINDOW_CLOSING" id="_1rrs"/>
          <CatchSequence exception="TestException" id="_1ruA" maxerror="0">
            <ProcedureCall id="_1ruB" procedure="utils.terminate_process">
              <variable name="client_name">$(client)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1ruC" procedure="run-log.make_screensot">
              <variable name="iw_name">SNAP_went_into_deadlock</variable>
            </ProcedureCall>
          </CatchSequence>
        </TryStep>
        <ProcedureCall id="_1rv1"
                       procedure="start.snap.check_already_started_else_start_SNAP"/>
      </Procedure>
    </Package>
  </PackageRoot>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
