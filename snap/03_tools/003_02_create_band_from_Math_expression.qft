<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="4.1.5">
  <include>qfs.qft</include>
  <include>tools_lib.qft</include>
  <reference>../010_Data_Processors/02_ImageAnalysis/010_Data_Processors_02_ImageAnalysis_03_K_Means_Cluster.qft</reference>
  <variable name="out_dir_bm">bandArithmetic</variable>
  <TestSet id="_2" name="003_02_create_band_from_Math_expression"
           reportname="003-02  Create Band from Math Expression">
    <variable name="band_node">/0/3/3</variable>
    <comment>Product generation tools. Arithmetic Expression Editor.</comment>
    <DependencyReference id="_1lWz"
                         reference="dependencies.start_application"/>
    <TestCase id="_8cc" name="check_components"
              reportname="Check components default">
      <TestStep id="_1lF0" name="check_menu_item_band_maths_is_disabled">
        <ProcedureCall id="_1lE-" procedure="do_click.menu.raster"/>
        <ProcedureCall id="_1lEw"
                       procedure="check.menu.tools.menuItemBandMath_enabled_status">
          <variable name="enabled_status">false</variable>
        </ProcedureCall>
      </TestStep>
      <ProcedureCall id="_1qdI" procedure="product_meta_data.MER_RR__1P"/>
      <ProcedureCall id="_1qdL" procedure="open.product_in_snap">
        <variable name="prod_dir">$(dataInDir)</variable>
        <variable name="in_out">in</variable>
        <variable name="prod">$(fileName)</variable>
        <variable name="product_type"/>
      </ProcedureCall>
      <ProcedureCall id="_1l52" procedure="check.product.not_opened"/>
      <IfSequence id="_1l53" test="&#34;$(not_opened)&#34;==&#34;true&#34;">
        <TryStep id="_9Z6">
          <ComponentWaiter client="VISAT"
                           component="NbMainWindow.Product_Explorer.tree"
                           errorlevel="0" id="_9ZA" raise="false"/>
          <CatchSequence exception="TestException" id="_9Z8" maxerror="0"/>
        </TryStep>
        <ElseSequence id="_1lEz">
          <TestStep id="_1lF1" name="check_menu_item_band_maths_is_enabled">
            <ProcedureCall id="_1lF4" procedure="select.product_tree.product">
              <variable name="prod_id">0</variable>
            </ProcedureCall>
            <ProcedureCall id="_1lF2" procedure="do_click.menu.raster"/>
            <ProcedureCall id="_1lF3"
                           procedure="check.menu.tools.menuItemBandMath_enabled_status">
              <variable name="enabled_status">true</variable>
            </ProcedureCall>
            <ProcedureCall id="_1lF5"
                           procedure="check.menu.tools.menuItemBandMath_enabled"/>
          </TestStep>
          <IfSequence id="_1lF6"
                      test="&#34;$(menuItemBandMath_enabled)&#34;==&#34;true&#34;">
            <ProcedureCall id="_1lF7"
                           procedure="open.raster.band_maths_with_menubar"/>
            <TestStep id="_1mj+" name="check_components">
              <ProcedureCall id="_1mjt"
                             procedure="check.tools.bandMaths.productName">
                <variable name="val">[1] $(fileName)</variable>
              </ProcedureCall>
              <ProcedureCall disabled="true" id="_1mju"
                             procedure="check.tools.bandMaths.bandName">
                <variable name="val"/>
              </ProcedureCall>
              <ProcedureCall id="_1mjv"
                             procedure="check.tools.bandMaths.bandDescription">
                <variable name="val"/>
              </ProcedureCall>
              <ProcedureCall id="_1mjw"
                             procedure="check.tools.bandMaths.bandUnit">
                <variable name="val"/>
              </ProcedureCall>
              <ProcedureCall id="_1mjx"
                             procedure="check.tools.bandMaths.bandWavelength">
                <variable name="val">0.0</variable>
              </ProcedureCall>
              <ProcedureCall id="_1mjy"
                             procedure="check.tools.bandMaths.noDataValue">
                <variable name="val">NaN</variable>
              </ProcedureCall>
              <ProcedureCall id="_1mjz"
                             procedure="check.tools.bandMaths.expression">
                <variable name="val"/>
              </ProcedureCall>
              <ProcedureCall id="_1mj-"
                             procedure="check.tools.bandMaths.saveExpressionOnly_selected_status">
                <variable name="sel_status">true</variable>
              </ProcedureCall>
              <ProcedureCall id="_1mk0"
                             procedure="check.tools.bandMaths.noDataValueUsed_selected_status">
                <variable name="sel_status">true</variable>
              </ProcedureCall>
              <CheckBooleanStep checktype="enabled" client="$(client)"
                                component="BandMathsDialog.ok" id="_1opR"/>
              <CheckBooleanStep checktype="enabled" client="$(client)"
                                component="BandMathsDialog.cancel"
                                id="_1opS"/>
              <CheckBooleanStep checktype="enabled" client="$(client)"
                                component="BandMathsDialog.help" id="_1opT"/>
              <IfSequence disabled="true" id="_1op7" test="${qftest:windows}">
                <CheckBooleanStep checktype="enabled" client="$(client)"
                                  component="BandMathsDialog.BandMathsDialog.ok"
                                  id="_1mjq"/>
                <CheckBooleanStep checktype="enabled" client="$(client)"
                                  component="BandMathsDialog.BandMathsDialog.cancel"
                                  id="_1mjr"/>
                <CheckBooleanStep checktype="enabled" client="$(client)"
                                  component="BandMathsDialog.BandMathsDialog.help"
                                  id="_1mjs"/>
                <ElseifSequence id="_1op8" name="MAC?"
                                test="'${system:os.name}' .find('Mac OS X')&gt;=0">
                  <CheckBooleanStep checktype="enabled" client="$(client)"
                                    component="BandMathsDialog.ok"
                                    id="_1opA"/>
                  <CheckBooleanStep checktype="enabled" client="$(client)"
                                    component="BandMathsDialog.cancel"
                                    id="_1opD"/>
                  <CheckBooleanStep checktype="enabled" client="$(client)"
                                    component="BandMathsDialog.help"
                                    id="_1opE"/>
                </ElseifSequence>
                <ElseSequence id="_1op9">
                  <CheckBooleanStep checktype="enabled" client="$(client)"
                                    component="BandMathsDialog.ok"
                                    id="_1opF"/>
                  <CheckBooleanStep checktype="enabled" client="$(client)"
                                    component="BandMathsDialog.cancel"
                                    id="_1opG"/>
                  <CheckBooleanStep checktype="enabled" client="$(client)"
                                    component="BandMathsDialog.help"
                                    id="_1opH"/>
                </ElseSequence>
              </IfSequence>
            </TestStep>
            <TestStep id="_1oU0" name="deselect_virtual">
              <ProcedureCall id="_1oT-"
                             procedure="deselect.tools.bandMaths.saveExpressionOnly"/>
              <ProcedureCall id="_1oU1"
                             procedure="check.tools.bandMaths.saveExpressionOnly_selected_status">
                <variable name="sel_status">false</variable>
              </ProcedureCall>
              <ProcedureCall id="_1oU2"
                             procedure="check.tools.bandMaths.noDataValueUsed_selected_status">
                <variable name="sel_status">true</variable>
              </ProcedureCall>
              <ProcedureCall id="_1oU3"
                             procedure="check.tools.bandMaths.noDataValueUsed_enabled_status">
                <variable name="enabled_status">false</variable>
              </ProcedureCall>
            </TestStep>
            <ProcedureCall id="_1mk1"
                           procedure="do_click.tools.bandMaths.button_cancel"/>
          </IfSequence>
          <ProcedureCall id="_1mk5" procedure="close.all_products"/>
        </ElseSequence>
      </IfSequence>
    </TestCase>
    <TestCase id="_8fb" name="create_virtual_band_save_session"
              reportname="Create virtual band and save session">
      <variable name="valid_expr">(!l1_flags.INVALID)</variable>
      <variable name="newBand">test_session</variable>
      <variable name="expr">radiance_7&lt;radiance_1 ? radiance_13 : 999.0</variable>
      <TestStep id="_1mkL" name="open_product">
        <ProcedureCall id="_1qdM" procedure="product_meta_data.MER_RR__1P"/>
        <ProcedureCall id="_1qdN" procedure="open.product_in_snap">
          <variable name="prod_dir">$(dataInDir)</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_8ff" name="create_virtual_band">
        <ProcedureCall id="_1oUE" procedure="create_virtual_band"/>
      </TestStep>
      <TestStep id="_8fm" name="check">
        <ProcedureCall id="_1oUO" procedure="check_new_band"/>
      </TestStep>
      <TestStep id="_8g4" name="save_close_open_session">
        <ProcedureCall id="_1mkF" procedure="select.product_tree.product">
          <variable name="prod_id">0</variable>
        </ProcedureCall>
        <ProcedureCall disabled="true" id="_1mkE"
                       procedure="save.file.product_save_as">
          <variable name="output_file_name">$(newBand)</variable>
          <variable name="output_folder">$(out_dir_bm)</variable>
        </ProcedureCall>
        <ProcedureCall disabled="true" id="_8fr"
                       procedure="wait.writting_BEAM-DIMAP_format_disappears"/>
        <ProcedureCall disabled="true" id="_8g1"
                       procedure="saves.saveSession"/>
        <ProcedureCall id="_1mkG" procedure="close.all_products"/>
        <ProcedureCall disabled="true" id="_8g3" postdelay="500"
                       procedure="opens.openSession"/>
        <ProcedureCall disabled="true" id="_9qq"
                       procedure="help.bandMath_tool.clickOK_in_VISAT_-_Warning_dialog_shoot_error"/>
      </TestStep>
      <TestStep disabled="true" id="_8g5" name="check">
        <ProcedureCall id="_1oUP" procedure="check_new_band"/>
      </TestStep>
      <ProcedureCall id="_1mkK" procedure="close.all_products"/>
    </TestCase>
    <TestCase disabled="true" id="_8gA"
              name="virtual_collocated_products_save_session"
              reportname="Create virtual band from two collocated products and save session">
      <variable name="fileName">MER_RR__1PNMAP20070729_022435_000000792060_00175_28285_0001.N1</variable>
      <variable name="newBand">test_coll_session</variable>
      <variable name="expr">$2.reflec_2&lt;0.5 ? radiance_2 : 999.0</variable>
      <variable name="fileName2">MER_RR__2PNMAP20070729_022435_000000792060_00175_28285_0001.N1</variable>
      <variable name="dataInDir">collocated_small</variable>
      <comment>Data is not available</comment>
      <TestStep id="_8gB" name="open_data_products" postdelay="1000">
        <ProcedureCall id="_1oRe" procedure="open.product_in_snap">
          <variable name="prod_dir">$(dataInDir)</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
        <ProcedureCall id="_1oRf" procedure="open.product_in_snap">
          <variable name="prod_dir">$(dataInDir)</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName2)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1oRg" name="create_virtual_band">
        <ProcedureCall id="_1oRh" procedure="select.product_tree.product">
          <variable name="prod_id">0</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oRi" procedure="open.raster.band_maths"/>
        <ProcedureCall id="_1oRn"
                       procedure="select.tools.bandMaths.target_product">
          <variable name="target_product">[1] $(fileName)</variable>
          <variable name="target_product_example_old">[1]_MER_RR__1PNMAP20070729_022435_000000792060_00175_28285_0001.N1</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oRj"
                       procedure="check.tools.bandMaths.productName">
          <variable name="val">[1] $(fileName)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oRk" procedure="set.tools.bandMaths.bandName">
          <variable name="val">$(newBand)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oRl" procedure="set.tools.bandMaths.expression">
          <variable name="val">$(expr)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oRm"
                       procedure="do_click.tools.bandMaths.button_ok"/>
        <ProcedureCall id="_1oRo"
                       procedure="do_click.warning_dialog.button_ok"/>
      </TestStep>
      <TestStep id="_1oRp" name="check">
        <ProcedureCall id="_1oUQ" procedure="check_new_band"/>
      </TestStep>
      <TestStep id="_8gO" name="save_close_open_session">
        <ProcedureCall id="_1oRv" procedure="select.product_tree.product">
          <variable name="prod_id">0</variable>
        </ProcedureCall>
        <ProcedureCall disabled="true" id="_1oRy"
                       procedure="save.file.product_save_as">
          <variable name="output_file_name">$(newBand)</variable>
          <variable name="output_folder">$(out_dir_bm)</variable>
        </ProcedureCall>
        <ProcedureCall disabled="true" id="_1oRz"
                       procedure="wait.writting_BEAM-DIMAP_format_disappears"/>
        <ProcedureCall id="_1oS2" procedure="select.product_tree.product">
          <variable name="prod_id">1</variable>
        </ProcedureCall>
        <ProcedureCall disabled="true" id="_1oS3"
                       procedure="save.file.product_save_as">
          <variable name="output_file_name">$(newBand)2</variable>
          <variable name="output_folder">$(out_dir_bm)</variable>
        </ProcedureCall>
        <ProcedureCall disabled="true" id="_8gQ"
                       procedure="wait.writting_BEAM-DIMAP_format_disappears"/>
        <ProcedureCall disabled="true" id="_1oR+"
                       procedure="saves.saveSession"/>
        <ProcedureCall disabled="true" id="_1oR-"
                       procedure="close.all_products"/>
        <ProcedureCall disabled="true" id="_8gT"
                       procedure="opens.openSession"/>
        <ProcedureCall disabled="true" id="_9qr"
                       procedure="help.bandMath_tool.clickOK_in_VISAT_-_Warning_dialog_shoot_error"/>
      </TestStep>
      <TestStep disabled="true" id="_8gU" name="check">
        <ProcedureCall id="_1oUR" procedure="check_new_band"/>
      </TestStep>
      <ProcedureCall id="_1oS8" procedure="close.all_products"/>
    </TestCase>
    <TestCase disabled="true" id="_8i1"
              name="reproject_product_containing_math_bands"
              reportname="Reproject product containing math bands">
      <variable name="fileName">MER_RR__2_test.N1</variable>
      <variable name="valid_expr">(l2_flags.WATER)</variable>
      <variable name="expr">algal_1 / algal_2</variable>
      <comment>Not working</comment>
      <TestStep id="_1oS9" name="open_product">
        <ProcedureCall id="_1oSA" procedure="open.product_in_snap">
          <variable name="prod_dir">mer_rr__2p_n1</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1oSB" name="create_virtual_band">
        <variable name="newBand">test_reproj_vb</variable>
        <ProcedureCall id="_1oUF" procedure="create_virtual_band"/>
      </TestStep>
      <TestStep id="_8ie" name="create_not_virtual_band">
        <variable name="newBand">test_reproj</variable>
        <ProcedureCall id="_1oWU" procedure="bandMaths_dialog_preparation"/>
        <ProcedureCall id="_1oSU"
                       procedure="deselect.tools.bandMaths.saveExpressionOnly"/>
        <ProcedureCall id="_1oST"
                       procedure="do_click.tools.bandMaths.button_ok"/>
        <ProcedureCall id="_1oUS" procedure="check_new_band"/>
      </TestStep>
      <TestStep id="_8wu" name="reproject_geo_lat_long">
        <variable name="ofn">test</variable>
        <ProcedureCall id="_1phv"
                       procedure="open.raster.geometric_operations.reprojection"/>
        <ProcedureCall id="_1pgy"
                       procedure="select_io_tab_reprojection_tool"/>
        <ProcedureCall id="_1pbb"
                       procedure="set.reprojection.target_product_name">
          <variable name="target_product_name">test</variable>
        </ProcedureCall>
        <ProcedureCall id="_1pbc" procedure="deselect.reprojection.save_as"/>
        <ProcedureCall id="_1phG"
                       procedure="test_sequence.preparation_geo_lat_long"/>
        <SetGlobalStep id="_1pxw" varname="output_format">
          <default>BEAM-DIMAP</default>
        </SetGlobalStep>
        <ProcedureCall id="_1phF" procedure="utility.run_reprojection"/>
        <ProcedureCall id="_1piH"
                       procedure="close_processing_tool.geometric_operations.reprojection"/>
      </TestStep>
      <TestStep id="_1pOo" name="check_reprojected_product">
        <SetGlobalStep id="_1opU" varname="group_id1"/>
        <SetGlobalStep id="_1opV" varname="view_Id1">
          <default>33</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1opW" varname="bandName">
          <default>test_reproj_vb</default>
        </SetGlobalStep>
        <ProcedureCall id="_1oUT"
                       procedure="do_click.tree.doubleclick_product_node">
          <variable name="prod_id">1</variable>
          <variable name="group_id">$(group_id1)</variable>
          <variable name="view_id">$(view_Id1)</variable>
          <variable name="band">$(bandName)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1lFe"
                       procedure="wait.disappear.creating_image_progress monitor">
          <variable name="bandName">$(bandName)</variable>
        </ProcedureCall>
        <SetGlobalStep id="_1pOT" varname="view_Id1">
          <default>34</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1pOU" varname="bandName">
          <default>test_reproj</default>
        </SetGlobalStep>
        <ProcedureCall id="_1piK"
                       procedure="do_click.tree.doubleclick_product_node">
          <variable name="prod_id">1</variable>
          <variable name="group_id">$(group_id1)</variable>
          <variable name="view_id">$(view_Id1)</variable>
          <variable name="band">$(bandName)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1piL"
                       procedure="wait.disappear.creating_image_progress monitor">
          <variable name="bandName">$(bandName)</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_DkF" name="close_session">
        <ProcedureCall id="_1oSb" procedure="close.all_products"/>
      </TestStep>
    </TestCase>
    <TestCase id="_9BZ" name="band_math_in_reproj_product"
              reportname="Create band in the reprojected product">
      <variable name="fileName">proj_geo_NN_MER_FR__2_test</variable>
      <variable name="newBand">test</variable>
      <variable name="expr">reflec_2&gt;0.5 ? reflec_2 : 999.0</variable>
      <comment>valid_expr	(!l1_flags.INVALID)
valid_expr	fneq(reflec_2,-1.5259254723787308E-5)</comment>
      <ProcedureCall id="_1oSg" procedure="open.product_in_snap">
        <variable name="prod_dir">dim_reproj</variable>
        <variable name="in_out">in</variable>
        <variable name="prod">$(fileName).dim</variable>
        <variable name="product_type"/>
      </ProcedureCall>
      <ProcedureCall id="_1oUG" procedure="create_virtual_band"/>
      <ProcedureCall id="_1oUU" procedure="check_new_band"/>
      <ProcedureCall id="_1oSu" procedure="close.all_products"/>
    </TestCase>
    <TestCase disabled="true" id="_9B-" name="cancel_band_math_BEAM-365"
              reportname="Cancel Band Math BEAM-365">
      <variable name="fileName">AT1_TOA_1P_test.zip</variable>
      <variable name="valid_expr">(!l1_flags.INVALID)</variable>
      <variable name="expr">reflec_nadir_0870&lt;reflec_nadir_1600 ? reflec_nadir_0870 : 999.0</variable>
      <comment>Data not available</comment>
      <TestStep id="_1oSv" name="open_product">
        <ProcedureCall id="_1oSw" procedure="open.product_in_snap">
          <variable name="prod_dir">ers_atsr1_e1_toa</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1oSx" name="cancel_creating_virtual_band">
        <variable name="newBand">test_cancel</variable>
        <ProcedureCall id="_1oUH" procedure="create_virtual_band"/>
        <TryStep id="_1oTM" name="cancel">
          <ProcedureCall id="_1oTL"
                         procedure="do_click.cancel.creating_image">
            <variable name="band_name">$(newBand)</variable>
          </ProcedureCall>
          <CatchSequence exception="TestException" id="_1oTN" maxerror="0"/>
        </TryStep>
        <ProcedureCall id="_1rkY" predelay="5000"
                       procedure="handle_error_dialogs"/>
        <TestStep id="_1oT2" name="check">
          <ProcedureCall disabled="true" id="_1oT3"
                         procedure="check.image_view.visible">
            <variable name="visible">false</variable>
          </ProcedureCall>
          <ProcedureCall id="_1rl8"
                         procedure="qfs.swing.cleanup.closeAllModalDialogs">
            <variable name="maxDialogs">5</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oT5" procedure="select.product_tree.band">
            <variable name="prod_id">0</variable>
            <variable name="group_id"/>
            <variable name="view_id">0</variable>
            <variable name="band"/>
          </ProcedureCall>
          <ProcedureCall id="_1oTg" procedure="check.product.node_not_exists">
            <variable name="node">$(newBand)</variable>
            <variable name="nodeSeparator">@</variable>
            <variable name="linear">false</variable>
          </ProcedureCall>
        </TestStep>
      </TestStep>
      <TestStep id="_1oTh" name="cancel_creating_not_virtual_band">
        <variable name="newBand">test_cancel2</variable>
        <ProcedureCall id="_1oWV" procedure="bandMaths_dialog_preparation"/>
        <ProcedureCall id="_1oT+"
                       procedure="deselect.tools.bandMaths.saveExpressionOnly"/>
        <ProcedureCall id="_1oTo"
                       procedure="do_click.tools.bandMaths.button_ok"/>
        <TryStep id="_1oTp" name="cancel">
          <ProcedureCall id="_1oTq"
                         procedure="do_click.cancel.creating_image">
            <variable name="band_name">$(newBand)</variable>
          </ProcedureCall>
          <CatchSequence exception="TestException" id="_1oTr" maxerror="0"/>
        </TryStep>
        <ProcedureCall id="_1rkX" predelay="5000"
                       procedure="handle_error_dialogs"/>
        <TestStep id="_1oTw" name="check">
          <ProcedureCall disabled="true" id="_1oTx"
                         procedure="check.image_view.visible">
            <variable name="visible">false</variable>
          </ProcedureCall>
          <ProcedureCall id="_1oTy" procedure="select.product_tree.band">
            <variable name="prod_id">0</variable>
            <variable name="group_id"/>
            <variable name="view_id">0</variable>
            <variable name="band"/>
          </ProcedureCall>
          <ProcedureCall id="_1oTz" procedure="check.product.node_not_exists">
            <variable name="node">$(newBand)</variable>
            <variable name="nodeSeparator">@</variable>
            <variable name="linear">false</variable>
          </ProcedureCall>
        </TestStep>
      </TestStep>
      <ProcedureCall id="_1qey" procedure="close.modal_dialogs"/>
      <ProcedureCall id="_1oTK" procedure="close.all_products"/>
    </TestCase>
    <TestCase id="_9DO" name="band_name_duplicate_invalid_BEAM-307"
              reportname="Band name duplicate, invalid BEAM-307 ">
      <variable name="valid_expr">(!l1_flags.INVALID)</variable>
      <variable name="newBand">test</variable>
      <variable name="expr">radiance_7&lt;radiance_1 ? radiance_13 : 999.0</variable>
      <ProcedureCall id="_1rkZ" procedure="close.all_products"/>
      <TestStep id="_9DP" name="openProduct">
        <ProcedureCall id="_1qdn" procedure="product_meta_data.MER_RR__1P"/>
        <ProcedureCall id="_1qdo" procedure="open.product_in_snap">
          <variable name="prod_dir">$(dataInDir)</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9DR" name="createNewBand">
        <ProcedureCall id="_1oUI" procedure="create_virtual_band"/>
        <ProcedureCall id="_1oUV" procedure="check_new_band"/>
      </TestStep>
      <TestStep id="_9Dm" name="try_to_create_band_name_duplicate">
        <ProcedureCall id="_1rk+"
                       procedure="create_virtual_band_handle_invalid_input"/>
      </TestStep>
      <TestStep id="_1oUs" name="try_to_create_band_name_with_space">
        <variable name="newBand">new Band</variable>
        <ProcedureCall id="_1rkm" procedure="create_virtual_band"/>
        <ProcedureCall id="_1oUw" procedure="check_new_band"/>
      </TestStep>
      <TestStep id="_1oUx" name="try_to_create_band_name_with_point">
        <variable name="newBand">new.Band</variable>
        <ProcedureCall id="_1rk-" procedure="create_virtual_band"/>
        <ProcedureCall id="_1oUz" procedure="check_new_band"/>
      </TestStep>
      <TestStep id="_1oU+" name="try_to_create_band_name_with_slash">
        <variable name="newBand">new/Band</variable>
        <ProcedureCall id="_1rl6"
                       procedure="create_virtual_band_handle_invalid_input"/>
      </TestStep>
      <TestStep id="_1oV9" name="try_to_create_band_name_null">
        <variable name="newBand"/>
        <ProcedureCall id="_1rl7"
                       procedure="create_virtual_band_handle_invalid_input"/>
      </TestStep>
      <ProcedureCall id="_1qez" procedure="close.modal_dialogs"/>
      <ProcedureCall id="_1oVL" procedure="close.all_products"/>
    </TestCase>
    <TestCase id="_9Er" name="arithmeticException_by_zero_BEAM-973"
              reportname="Arithmetic Exception by zero BEAM-973">
      <variable name="fileName">ASA_APP_1PNPDE20080210_031331_000000162065_00476_31091_7329.N1</variable>
      <variable name="valid_expr">(!l1_flags.INVALID)</variable>
      <variable name="newBand">test</variable>
      <variable name="expr">abs(Amplitude_VV / Amplitude_VH)</variable>
      <ProcedureCall id="_1oVN" procedure="open.product_in_snap">
        <variable name="prod_dir">asar_app_n1</variable>
        <variable name="in_out">in</variable>
        <variable name="prod">$(fileName)</variable>
        <variable name="product_type"/>
      </ProcedureCall>
      <TryStep id="_1oX8" name="try_to_create_band">
        <ProcedureCall id="_1oX9" procedure="create_virtual_band"/>
        <CatchSequence exception="TestException" id="_1oXA" maxerror="0"/>
      </TryStep>
      <TryStep id="_1oVT" name="click_Cancel_dialog_SNAP_SNAP_Error">
        <ProcedureCall id="_1oXB"
                       procedure="do_click.error_dialog.dialog_SNAP_SNAP_Error.button_Cancel"/>
        <CatchSequence exception="TestException" id="_1oVU" maxerror="0">
          <ProcedureCall id="_1oVV"
                         procedure="run-log.error_message.dialog_does_not_appear">
            <variable name="dialog">SNAP_Error</variable>
          </ProcedureCall>
        </CatchSequence>
      </TryStep>
      <ProcedureCall id="_1oVW" procedure="close.all_products"/>
    </TestCase>
    <TestCase id="_9Fz"
              name="no-data_samples_shall_be_considered_in_band_math_BEAM-939 "
              reportname="No-data samples shall be considered in band math BEAM-939 ">
      <variable name="fileName">MER_RR__2_test.N1</variable>
      <variable name="valid_expr">l2_flags.WATER</variable>
      <variable name="expr">algal_2&gt;10? algal_2 : 999.9</variable>
      <comment>BEAM-939   	 No-data samples not considered in band math</comment>
      <TestStep id="_1oVX" name="open_product">
        <ProcedureCall id="_1oXT" procedure="open.product_in_snap">
          <variable name="prod_dir">mer_rr__2p_n1</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1oVZ" name="create_virtual_band">
        <variable name="no_data_value">999.9</variable>
        <variable name="newBand">test_no_data_999</variable>
        <ProcedureCall id="_1oWW" procedure="bandMaths_dialog_preparation"/>
        <ProcedureCall id="_1oVv" procedure="set.tools.bandMaths.noDataValue">
          <variable name="val">$(no_data_value)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oVu"
                       procedure="do_click.tools.bandMaths.button_ok"/>
        <ProcedureCall id="_1oVc" procedure="check_new_band"/>
        <BasicSequence id="_1oXC" name="todo_check_NoData_in_PixelInfo"/>
      </TestStep>
      <TestStep id="_1oVw" name="create_not_virtual_band">
        <variable name="no_data_value">-222.0</variable>
        <variable name="newBand">test_222</variable>
        <ProcedureCall id="_1oWX" procedure="bandMaths_dialog_preparation"/>
        <ProcedureCall id="_1oWE"
                       procedure="deselect.tools.bandMaths.saveExpressionOnly"/>
        <ProcedureCall id="_1oWI"
                       procedure="do_click.tools.bandMaths.button_ok"/>
        <ProcedureCall id="_1oWJ" procedure="check_new_band"/>
        <BasicSequence id="_1oXD" name="todo_check_NoData_in_PixelInfo"/>
      </TestStep>
      <TestStep id="_9Ge" name="do_not_replace_NaN">
        <variable name="newBand">do_not_replace_NaN</variable>
        <ProcedureCall id="_1oWY" procedure="bandMaths_dialog_preparation"/>
        <ProcedureCall id="_1oWZ"
                       procedure="deselect.tools.bandMaths.noDataValueUsed_selected"/>
        <ProcedureCall id="_1oWa"
                       procedure="do_click.tools.bandMaths.button_ok"/>
        <ProcedureCall id="_1oWb" procedure="check_new_band"/>
        <BasicSequence id="_1oXE" name="todo_check_NoData_in_PixelInfo"/>
      </TestStep>
      <ProcedureCall id="_1oVn" procedure="close.all_products"/>
    </TestCase>
    <TestCase id="_1qdu" name="create_tie_point_band"
              reportname="Create tie-point band">
      <variable name="valid_expr">(!l1_flags.INVALID)</variable>
      <variable name="newBand">test_create_tie_point_band</variable>
      <variable name="expr">latitude&gt;50 ? radiance_13 : radiance_7</variable>
      <TestStep id="_1qdv" name="open_product">
        <ProcedureCall id="_1qdw" procedure="product_meta_data.MER_RR__1P"/>
        <ProcedureCall id="_1qdx" procedure="open.product_in_snap">
          <variable name="prod_dir">$(dataInDir)</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1qdy" name="create_virtual_band">
        <ProcedureCall id="_1qdz" procedure="create_virtual_band"/>
      </TestStep>
      <TestStep id="_1qd+" name="check">
        <ProcedureCall id="_1qen" procedure="handle_error_dialogs"/>
        <ProcedureCall id="_1qd-" procedure="check_new_band"/>
      </TestStep>
      <ProcedureCall id="_1qe5" procedure="close.all_products"/>
    </TestCase>
    <TestCase id="_1qeo"
              name="create_band_with_tie_point_grid_resolution_SNAP_123"
              reportname="Create band with tie-point grid resolution, SNAP-123">
      <variable name="valid_expr">(!l1_flags.INVALID)</variable>
      <variable name="newBand">test_SNAP_123</variable>
      <variable name="expr">view_zenith + radiance_12 * 0.0</variable>
      <TestStep id="_1qep" name="open_product">
        <ProcedureCall id="_1qeq" procedure="product_meta_data.MER_RR__1P"/>
        <ProcedureCall id="_1qer" procedure="open.product_in_snap">
          <variable name="prod_dir">$(dataInDir)</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1qes" name="create_virtual_band">
        <ProcedureCall id="_1qet" procedure="create_virtual_band"/>
      </TestStep>
      <TestStep id="_1qeu" name="check">
        <ProcedureCall id="_1qev" procedure="handle_error_dialogs"/>
        <ProcedureCall id="_1qew" procedure="check_new_band"/>
      </TestStep>
      <ProcedureCall id="_1qex" procedure="close.all_products"/>
    </TestCase>
    <TestCase disabled="true" id="_9H5"
              name="refresh of virtual bands_BEAM-1012"
              reportname="Refresh of virtual bands BEAM-1012 ">
      <variable name="prod">MER_RR__2_test.N1</variable>
      <variable name="valid_expr">(!nan(test_1)) &amp;&amp; (!nan(test_2))</variable>
      <variable name="expr">10</variable>
      <variable name="newBand1">test_1</variable>
      <variable name="newBand2">test_2</variable>
      <variable name="newBand3">test_3</variable>
      <comment>Refresh of virtual bands BEAM-1012 &lt;br&gt;&lt;br&gt;
 Open band arithmetic, create band "b1", expression is "10"&lt;br&gt;
- Open band arithmetic, create band "b2", expression is "10"&lt;br&gt;
- Open band arithmetic, create band "b3", expression is "b1 + b2"&lt;br&gt;
- Open "b3" as image, move mouse, pixel info view shows "20"&lt;br&gt;
- Change "b2" to "11"&lt;br&gt;
- Open "b3" as image, move mouse, pixel info view still shows "20"&lt;br&gt;&lt;br&gt;

Workaround:&lt;br&gt;

- Click the Recycle Bin icon in VISAT's status bar.&lt;br&gt;
- Caches are now cleared, thus image data will is recomputed&lt;br&gt;
- Move mouse over "b3" image, pixel info view now shows "21"</comment>
      <TestStep id="_9H6" name="openProduct">
        <ProcedureCall id="_9H7" procedure="opens.openProduct_clickIcon">
          <variable name="fileName">sensors_platforms/MERIS/MER_RR__2P/N1/$(prod)</variable>
          <variable name="prodType">$(prodTypeAll)</variable>
          <comment>Open Product</comment>
        </ProcedureCall>
        <ProcedureCall id="_9n-" procedure="wait.product_is_opened_in_visat">
          <variable name="product_name">$(prod)</variable>
          <variable name="index">1</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9H8" name="create_band_1">
        <ProcedureCall id="_9H9" procedure="open.open_BandArithmeticTool"/>
        <ProcedureCall id="_9HA"
                       procedure="checks.bandMath_tool.targetProduct_comboBox">
          <variable name="product">$(prod)</variable>
          <variable name="prId">1</variable>
        </ProcedureCall>
        <ProcedureCall id="_9HB"
                       procedure="help.bandMath_tool.insert_BandName">
          <variable name="bandName">$(newBand1)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9HC"
                       procedure="help.bandMath_tool.insert_Expression">
          <variable name="expression">$(expr)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9HE" procedure="clicks.bandMath_tool.ok"/>
      </TestStep>
      <TestStep id="_9HF" name="check_band_1">
        <ProcedureCall id="_9HG"
                       procedure="checkImageViewIsOpened.checkImageView">
          <variable name="product_id">1</variable>
          <variable name="image_view_title">$(newBand1)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9HH"
                       procedure="checks.band_properties.virtual_band">
          <variable name="prId">1</variable>
          <variable name="product_name">$(prod)</variable>
          <variable name="validExp"/>
          <variable name="no_data">NaN</variable>
          <variable name="virtual_band">$(newBand1)</variable>
          <variable name="vb_exp">$(expr)</variable>
          <variable name="use_no_data_selection">true</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9Hh" name="create_band_2">
        <ProcedureCall id="_9Hi" procedure="open.open_BandArithmeticTool"/>
        <ProcedureCall id="_9Hj"
                       procedure="checks.bandMath_tool.targetProduct_comboBox">
          <variable name="product">$(prod)</variable>
          <variable name="prId">1</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Hk"
                       procedure="help.bandMath_tool.insert_BandName">
          <variable name="bandName">$(newBand2)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Hl"
                       procedure="help.bandMath_tool.insert_Expression">
          <variable name="expression">$(expr)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Hm" procedure="clicks.bandMath_tool.ok"/>
      </TestStep>
      <TestStep id="_9Hn" name="check_band_2">
        <ProcedureCall id="_9Ho"
                       procedure="checkImageViewIsOpened.checkImageView">
          <variable name="product_id">1</variable>
          <variable name="image_view_title">$(newBand2)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Hp"
                       procedure="checks.band_properties.virtual_band">
          <variable name="prId">1</variable>
          <variable name="product_name">$(prod)</variable>
          <variable name="validExp"/>
          <variable name="no_data">NaN</variable>
          <variable name="virtual_band">$(newBand2)</variable>
          <variable name="vb_exp">$(expr)</variable>
          <variable name="use_no_data_selection">true</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9Hq" name="create_band_3">
        <ProcedureCall id="_9Hr" procedure="open.open_BandArithmeticTool"/>
        <ProcedureCall id="_9Hs"
                       procedure="checks.bandMath_tool.targetProduct_comboBox">
          <variable name="product">$(prod)</variable>
          <variable name="prId">1</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Ht"
                       procedure="help.bandMath_tool.insert_BandName">
          <variable name="bandName">$(newBand3)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Hu"
                       procedure="help.bandMath_tool.insert_Expression">
          <variable name="expression">$(newBand1)+$(newBand2)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Hv" procedure="clicks.bandMath_tool.ok"/>
      </TestStep>
      <TestStep id="_9Hw" name="check_band_3">
        <ProcedureCall id="_9Hx"
                       procedure="checkImageViewIsOpened.checkImageView">
          <variable name="product_id">1</variable>
          <variable name="image_view_title">$(newBand3)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Hy"
                       procedure="checks.band_properties.virtual_band">
          <variable name="prId">1</variable>
          <variable name="product_name">$(prod)</variable>
          <variable name="validExp">$(valid_expr)</variable>
          <variable name="no_data">NaN</variable>
          <variable name="virtual_band">$(newBand3)</variable>
          <variable name="vb_exp">$(newBand1)+$(newBand2)</variable>
          <variable name="use_no_data_selection">true</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9IB" name="check_pixel_info">
        <ProcedureCall id="_9H+" procedure="opens.openPinDialog"/>
        <ProcedureCall id="_9Hz"
                       procedure="creates.createPinFromPinManagerUsingPixelPos">
          <variable name="pixelX">500</variable>
          <variable name="pixelY">500</variable>
          <variable name="pinName">test</variable>
        </ProcedureCall>
        <ProcedureCall id="_9H-" procedure="selects.select_one_pin_in_table">
          <variable name="pinNr">0</variable>
        </ProcedureCall>
        <ProcedureCall id="_9I0" procedure="closes.close_PIN_Manager"/>
        <ProcedureCall id="_9I1"
                       procedure="clicks.click_icon.click_PixelInfoToolView_icon"/>
        <ProcedureCall id="_7Kk" postdelay="1000"
                       procedure="selects.snap_to_selected_pin"/>
        <ProcedureCall id="_Dk8" procedure="check_bands_table_1"/>
        <CheckItemsStep client="VISAT"
                        component="mainFrameVISAT.PixelInfoToolView.Control3.table4.12"
                        id="_9I9">
          <item>10.0</item>
          <item>10.0</item>
          <item>20.0</item>
        </CheckItemsStep>
      </TestStep>
      <TestStep id="_9Ob" name="change_vb_expression_band_2">
        <ProcedureCall id="_9IC"
                       procedure="clicks.click_icon.click_ProductToolView_icon"/>
        <ProcedureCall id="_9ON" procedure="selects.selectBandInProductTree">
          <variable name="band">$(newBand2)</variable>
          <variable name="index">1</variable>
          <variable name="product_name">$(prod)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9OO"
                       procedure="helps.bandProperties.change_vb_expression">
          <variable name="band">$(newBand2)</variable>
          <variable name="expession">11</variable>
        </ProcedureCall>
        <ProcedureCall id="_9ID"
                       procedure="checks.band_properties.virtual_band">
          <variable name="prId">1</variable>
          <variable name="product_name">$(prod)</variable>
          <variable name="validExp"/>
          <variable name="no_data">NaN</variable>
          <variable name="virtual_band">$(newBand2)</variable>
          <variable name="vb_exp">11</variable>
          <variable name="use_no_data_selection">true</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9OS" name="check_pixel_info">
        <ProcedureCall id="_Dj-" procedure="select_pin_in_the_table"/>
        <ProcedureCall id="_9OX"
                       procedure="clicks.click_icon.click_PixelInfoToolView_icon"/>
        <ProcedureCall id="_9OY" postdelay="500"
                       procedure="selects.snap_to_selected_pin"/>
        <ProcedureCall id="_Dk6" procedure="check_bands_table_1"/>
        <ProcedureCall id="_Dk1" procedure="get.pixel_value_pixel_info_view">
          <variable name="cell_nr">0</variable>
        </ProcedureCall>
        <IfSequence id="_Dk2"
                    test="&#34;$(pixel_value)&#34;==&#34;&#34; or &#34;$(pixel_value)&#34;==&#34;Invalid pos.&#34;">
          <ProcedureCall id="_Dk3" procedure="select_pin_on_image_view"/>
        </IfSequence>
        <CheckItemsStep client="VISAT"
                        component="mainFrameVISAT.PixelInfoToolView.Control3.table4.12"
                        id="_Di5">
          <item>10.0</item>
          <item>11.0</item>
          <item>21.0</item>
        </CheckItemsStep>
      </TestStep>
      <TestStep id="_9Py" name="change_no_data_band_1">
        <ProcedureCall id="_9Pz"
                       procedure="clicks.click_icon.click_ProductToolView_icon"/>
        <ProcedureCall id="_9P+" procedure="selects.selectBandInProductTree">
          <variable name="band">$(newBand1)</variable>
          <variable name="index">1</variable>
          <variable name="product_name">$(prod)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9P-"
                       procedure="helps.bandProperties.change_no_data_vb_properties">
          <variable name="band">$(newBand1)</variable>
          <variable name="no_data_value">10</variable>
        </ProcedureCall>
        <ProcedureCall id="_9Q0"
                       procedure="checks.band_properties.virtual_band">
          <variable name="prId">1</variable>
          <variable name="product_name">$(prod)</variable>
          <variable name="validExp"/>
          <variable name="no_data">10.0</variable>
          <variable name="virtual_band">$(newBand1)</variable>
          <variable name="vb_exp">10</variable>
          <variable name="use_no_data_selection">true</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9Q2" name="check_pixel_info">
        <ProcedureCall id="_Dk0" procedure="select_pin_in_the_table"/>
        <ProcedureCall id="_9Q6"
                       procedure="clicks.click_icon.click_PixelInfoToolView_icon"/>
        <ProcedureCall id="_9Q7" postdelay="500"
                       procedure="selects.snap_to_selected_pin"/>
        <ProcedureCall id="_Dk7" procedure="check_bands_table_1"/>
        <IfSequence id="_DkD"
                    test="&#34;$(pixel_value)&#34;==&#34;&#34; or &#34;$(pixel_value)&#34;==&#34;Invalid pos.&#34;">
          <ProcedureCall id="_DkE" procedure="select_pin_on_image_view"/>
        </IfSequence>
        <CheckItemsStep client="VISAT"
                        component="mainFrameVISAT.PixelInfoToolView.Control3.table4.12"
                        id="_9Q9">
          <item>NaN</item>
          <item>11.0</item>
          <item>NaN</item>
        </CheckItemsStep>
      </TestStep>
      <ProcedureCall id="_9Hf" procedure="close_modified_product"/>
    </TestCase>
    <TestCase disabled="true" id="_9oz"
              name="vb_results_for_non_zero_levels_of_image_pyramids_BEAM-1291 "
              reportname="Virtual bands may compute wrong results for non-zero levels of image pyramids  BEAM-1291 ">
      <variable name="prod">MER_RR__1_test.N1</variable>
      <variable name="valid_expr">(!nan(test_1)) &amp;&amp; (!nan(test_2))</variable>
      <variable name="expr">X</variable>
      <variable name="newBand1">test_1</variable>
      <variable name="newBand2">test_2</variable>
      <variable name="newBand3">test_3</variable>
      <comment>Virtual bands may compute wrong results for non-zero levels of image pyramids  BEAM-1291 &lt;br&gt;&lt;br&gt;
(1) Open product in VISAT&lt;br&gt;
(2) Look at raster width (e.g. 1121 pixels)&lt;br&gt;
(3) Add virtual band with band maths expresiion "X" (value of pixel X coordinate)&lt;br&gt;
(4) Look at Colour Manipulation window: min=0, max=139 (Rough statistics!) --&gt; WRONG (corresponds to image level &gt; 0, e.g. 3)&lt;br&gt;
(5) Press "Rough statistics!" label&lt;br&gt;
(6) min=0, max=1120 --&gt; NOW CORRECT (corresponds to image level 0)&lt;br&gt;
(7) Open image view for X, zoom in and out --&gt; different zoom levels show different images (different levels of grey)&lt;br&gt;&lt;br&gt;
Only virtual bands which used LAT, LON, X or Y in their expression where affected.&lt;br&gt;
Not fully resolved. The coloring of the images are still slightly different on each level, but only in reprojected or orthorectified products and only in differential bands (e.g. longitude - LON) not in sum bands (e.g. longitude + LON)
</comment>
      <TestStep id="_9o+" name="openProduct">
        <ProcedureCall id="_9o-" procedure="opens.openProduct_clickIcon">
          <variable name="fileName">sensors_platforms/MERIS/MER_RR__1P/N1/$(prod)</variable>
          <variable name="prodType">$(prodTypeAll)</variable>
          <comment>Open Product</comment>
        </ProcedureCall>
        <ProcedureCall id="_9p0" procedure="wait.product_is_opened_in_visat">
          <variable name="product_name">$(prod)</variable>
          <variable name="index">1</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9q0" name="look_at_raster_width">
        <ProcedureCall id="_9q1"
                       procedure="opens.analysisToolBar.openInfoDialog"/>
        <ProcedureCall id="_9q2"
                       procedure="analysis.info.product_scene_width">
          <variable name="val">1121</variable>
        </ProcedureCall>
        <ProcedureCall id="_9q3" procedure="closes.dialog"/>
      </TestStep>
      <TestStep id="_9p1" name="add_virtual_band">
        <comment>Add virtual band with band maths expresiion "X" (value of pixel X coordinate) </comment>
        <ProcedureCall id="_9p2" procedure="open.open_BandArithmeticTool"/>
        <ProcedureCall id="_9p3"
                       procedure="checks.bandMath_tool.targetProduct_comboBox">
          <variable name="product">$(prod)</variable>
          <variable name="prId">1</variable>
        </ProcedureCall>
        <ProcedureCall id="_9p4"
                       procedure="help.bandMath_tool.insert_BandName">
          <variable name="bandName">$(newBand1)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9p5"
                       procedure="help.bandMath_tool.insert_Expression">
          <variable name="expression">$(expr)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9p6" procedure="clicks.bandMath_tool.ok"/>
      </TestStep>
      <TestStep id="_9p7" name="check_band_1">
        <ProcedureCall id="_9p8"
                       procedure="checkImageViewIsOpened.checkImageView">
          <variable name="product_id">1</variable>
          <variable name="image_view_title">$(newBand1)</variable>
        </ProcedureCall>
        <ProcedureCall id="_9p9"
                       procedure="checks.band_properties.virtual_band">
          <variable name="prId">1</variable>
          <variable name="product_name">$(prod)</variable>
          <variable name="validExp"/>
          <variable name="no_data">NaN</variable>
          <variable name="virtual_band">$(newBand1)</variable>
          <variable name="vb_exp">$(expr)</variable>
          <variable name="use_no_data_selection">true</variable>
        </ProcedureCall>
      </TestStep>
      <ProcedureCall id="_9qJ" procedure="opens.openColorManipulation"/>
      <TestStep id="_9qQ" name="check_colour_manipulation">
        <ProcedureCall id="_9qR" procedure="colour_manipulaion.labelMin">
          <variable name="val">0.5</variable>
        </ProcedureCall>
        <ProcedureCall id="_9qS" procedure="colour_manipulaion.labelMax">
          <variable name="val">1120.5</variable>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_9qM" name="computer_accurate_statistic">
        <ProcedureCall id="_9qN"
                       procedure="clicks.colour_manipulation.labelRough_statistics"/>
        <ProcedureCall id="_9qO" procedure="wait.dialogQuestion"/>
        <ProcedureCall id="_9qP" procedure="clicks.questionDialog.buttonYes"/>
      </TestStep>
      <TestStep id="_9qW" name="check_colour_manipulation">
        <ProcedureCall id="_9qX" procedure="colour_manipulaion.labelMin">
          <variable name="val">0.5</variable>
        </ProcedureCall>
        <ProcedureCall id="_9qY" procedure="colour_manipulaion.labelMax">
          <variable name="val">1120.5</variable>
        </ProcedureCall>
      </TestStep>
      <ProcedureCall id="_9p-" procedure="close_modified_product"/>
    </TestCase>
    <TestCase id="_1py0"
              name="save_virtual_band_that_has_been_converted_issue_9 "
              reportname="Save a virtual band that has been converted to computed band ">
      <variable name="valid_expr">(!l1_flags.INVALID)</variable>
      <variable name="newBand">test_save_converted_virtual_band</variable>
      <variable name="expr">radiance_7&lt;radiance_1 ? radiance_13 : 999.0</variable>
      <TestStep id="_1py1" name="open_product">
        <ProcedureCall id="_1qdr" procedure="product_meta_data.MER_RR__1P"/>
        <ProcedureCall id="_1qds" procedure="open.product_in_snap">
          <variable name="prod_dir">$(dataInDir)</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1py3" name="create_virtual_band">
        <ProcedureCall id="_1py4" procedure="create_virtual_band"/>
      </TestStep>
      <TestStep id="_1py5" name="check">
        <ProcedureCall id="_1py6" procedure="check_new_band"/>
      </TestStep>
      <TestStep id="_1pyI" name="convert_virtual_band">
        <ProcedureCall id="_1pyK" procedure="get.tree.get_index_of_node">
          <variable name="node">$(newBand)</variable>
          <variable name="nodeSeparator">@</variable>
          <variable name="linear">false</variable>
        </ProcedureCall>
        <ProcedureCall id="_1qcm"
                       procedure="do_click.tree.right_click_product_node">
          <variable name="node">$(new_band_id)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1qcn"
                       procedure="do_click.context_menu.convert_computed_band"/>
        <ServerScriptStep disabled="true" id="_1l5A" name="print">
          <code>print "$(new_band_id)"</code>
        </ServerScriptStep>
      </TestStep>
      <TestStep id="_1py7" name="save">
        <ProcedureCall id="_1qcp" procedure="select.product_tree.product">
          <variable name="prod_id">0</variable>
        </ProcedureCall>
        <ProcedureCall id="_1qco" procedure="save.file.product_save_as">
          <variable name="output_file_name">$(newBand)</variable>
          <variable name="output_folder">$(out_dir_bm)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1pyC" procedure="close.all_products"/>
      </TestStep>
      <TestStep id="_1pyF" name="check">
        <variable name="group_id1"/>
        <variable name="view_Id1">3</variable>
        <variable name="bandName">$(newBand)</variable>
        <ProcedureCall id="_1qcq" procedure="open.product_in_snap">
          <variable name="prod_dir">$(out_dir_bm)</variable>
          <variable name="in_out">out</variable>
          <variable name="prod">$(newBand).dim</variable>
          <variable name="product_type"/>
        </ProcedureCall>
        <ProcedureCall id="_1qcr"
                       procedure="utility.open_image_view_check_it"/>
      </TestStep>
      <ProcedureCall id="_1pyH" procedure="close.all_products"/>
    </TestCase>
    <TestCase id="_1oWc" name="help" reportname="Help">
      <variable name="fileName">MER_RR__1_test.N1</variable>
      <TestStep id="_1oWd" name="open_product">
        <ProcedureCall id="_1oXV" procedure="open.product_in_snap">
          <variable name="prod_dir">mer_rr__1p_n1</variable>
          <variable name="in_out">in</variable>
          <variable name="prod">$(fileName)</variable>
          <variable name="product_type"/>
        </ProcedureCall>
      </TestStep>
      <TestStep id="_1oWf" name="open_band_Maths_dialog">
        <ProcedureCall id="_1oWu" procedure="select.product_tree.product">
          <variable name="prod_id">0</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oWv" procedure="open.raster.band_maths"/>
      </TestStep>
      <TestStep id="_1oWh" name="check_help">
        <ProcedureCall id="_1oWy"
                       procedure="do_click.tools.bandMaths.button_help"/>
        <ProcedureCall disabled="true" id="_1pik"
                       procedure="handle_invalid_input"/>
        <ProcedureCall id="_1qcu" procedure="help.check_help_appears_close"/>
      </TestStep>
      <ProcedureCall id="_1oWx"
                     procedure="do_click.tools.bandMaths.button_cancel"/>
      <ProcedureCall id="_1oWt" procedure="close.all_products"/>
    </TestCase>
  </TestSet>
  <PackageRoot id="_4">
    <Procedure id="_1rkc" name="create_virtual_band_handle_invalid_input">
      <TryStep id="_1rl0" name="try_to_create_band">
        <ProcedureCall id="_1rl1" procedure="create_virtual_band"/>
        <ProcedureCall disabled="true" id="_1rl2"
                       procedure="bandMaths_dialog_preparation"/>
        <CatchSequence exception="TestException" id="_1rl3" maxerror="0"/>
      </TryStep>
      <ProcedureCall id="_1rl4" procedure="handle_invalid_input"/>
      <ProcedureCall id="_1rl5"
                     procedure="qfs.swing.cleanup.closeAllModalDialogs">
        <variable name="maxDialogs">5</variable>
      </ProcedureCall>
      <TryStep disabled="true" id="_1rkg">
        <ProcedureCall id="_1rkd" procedure="bandMaths_dialog_preparation"/>
        <ProcedureCall id="_1rkl"
                       procedure="wait.appear.error.dialog_Invalid_Input_exception"/>
        <ProcedureCall id="_1rki" procedure="handle_invalid_input"/>
        <CatchSequence exception="TestException" id="_1rkh" maxerror="0">
          <ProcedureCall id="_1rkf"
                         procedure="do_click.tools.bandMaths.button_ok"/>
          <ProcedureCall id="_1rkj" procedure="handle_invalid_input"/>
        </CatchSequence>
      </TryStep>
    </Procedure>
    <Procedure id="_1oU5" name="create_virtual_band">
      <ProcedureCall id="_1oWS" procedure="bandMaths_dialog_preparation"/>
      <ProcedureCall id="_1oUC"
                     procedure="do_click.tools.bandMaths.button_ok"/>
    </Procedure>
    <Procedure id="_1oWK" name="bandMaths_dialog_preparation">
      <ProcedureCall id="_1oWL" procedure="select.product_tree.product">
        <variable name="prod_id">0</variable>
      </ProcedureCall>
      <ProcedureCall id="_1oWM" procedure="open.raster.band_maths"/>
      <ProcedureCall id="_1oWN"
                     procedure="select.tools.bandMaths.saveExpressionOnly"/>
      <ProcedureCall id="_1oWO" procedure="check.tools.bandMaths.productName">
        <variable name="val">[1] $(fileName)</variable>
      </ProcedureCall>
      <TryStep disabled="true" id="_1opO">
        <ProcedureCall id="_1opM"
                       procedure="wait.appear.error.dialog_Band_Maths_error"/>
        <ProcedureCall id="_1opN"
                       procedure="do_click.error_dialog.band_maths.button_OK_error"/>
        <CatchSequence exception="TestException" id="_1opP" maxerror="0">
          <ProcedureCall id="_1opQ" procedure="run-log.logError">
            <variable name="message">error dialog appears</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
        </CatchSequence>
      </TryStep>
      <ProcedureCall id="_1oWQ" procedure="set.tools.bandMaths.expression">
        <variable name="val">$(expr)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1oWP" procedure="set.tools.bandMaths.bandName">
        <variable name="val">$(newBand)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1oUJ" name="check_new_band">
      <ProcedureCall id="_1oUK" procedure="check.image_view.visible">
        <variable name="visible">true</variable>
      </ProcedureCall>
      <ProcedureCall id="_1oUL" procedure="select.product_tree.band">
        <variable name="prod_id">0</variable>
        <variable name="group_id"/>
        <variable name="view_id">0</variable>
        <variable name="band">$(newBand)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1oUM" procedure="get.tree.get_index_of_node">
        <variable name="node">$(newBand)</variable>
        <variable name="nodeSeparator">@</variable>
        <variable name="linear">false</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1oSc" name="double_band_name">
      <ProcedureCall id="_1oSd"
                     procedure="do_click.error_dialog.invalid_input.button_OK"/>
      <ProcedureCall id="_1oSe"
                     procedure="do_click.error_dialog.band_maths.button_OK"/>
      <ProcedureCall id="_1oUh" procedure="close.modal_dialogs"/>
    </Procedure>
    <Procedure id="_1piX" name="handle_invalid_input">
      <comment>@teststep handle_invalid_input</comment>
      <TryStep id="_1piY" postdelay="2000">
        <ProcedureCall id="_1piZ"
                       procedure="wait.appear.error.dialog_Invalid_Input"/>
        <ProcedureCall id="_1pia"
                       procedure="do_click.error_dialog.invalid_input.button_OK"/>
        <CatchSequence exception="TestException" id="_1pib" maxerror="0">
          <ProcedureCall id="_1pic" procedure="run-log.make_screensot">
            <variable name="iw_name">invalid_input_error_dialog</variable>
            <variable name="iw_name_example">error_dialog</variable>
          </ProcedureCall>
          <ProcedureCall id="_1pid"
                         procedure="run-log.error_message.dialog_does_not_appear">
            <variable name="dialog">Invalid Input</variable>
          </ProcedureCall>
        </CatchSequence>
      </TryStep>
      <BasicSequence disabled="true" id="_1pie"
                     name="todo_if_snap_will_work_stably">
        <ProcedureCall id="_1pif" postdelay="500"
                       procedure="do_click.error_dialog.band_maths.button_OK"/>
        <ProcedureCall id="_1pig" procedure="close.modal_dialogs"/>
      </BasicSequence>
    </Procedure>
    <Procedure id="_1qeT" name="handle_error_dialogs">
      <TryStep id="_1rkS" name="click_OK_in_SNAP_error_dialog">
        <ProcedureCall id="_1rkT"
                       procedure="wait.appear.error.dialog_SNAP-Error"/>
        <ProcedureCall id="_1rkW"
                       procedure="do_click.error_dialog.dialog_SNAP_Error.button_OK"/>
        <CatchSequence exception="TestException" id="_1rkV" maxerror="0"/>
      </TryStep>
      <TryStep id="_1rkC" name="click_Yes_in_SNAP_SNAP_error_dialog">
        <ProcedureCall id="_1rkD"
                       procedure="wait.appear.error.dialog_SNAP_SNAP_Error"/>
        <ProcedureCall id="_1rkE"
                       procedure="do_click.error_dialog.dialog_SNAP_SNAP_Error.button_OK"/>
        <CatchSequence exception="TestException" id="_1rkF" maxerror="0"/>
      </TryStep>
      <TryStep id="_1rkG" name="click_Yes_in_SNAP_error_dialog">
        <ProcedureCall id="_1rkH"
                       procedure="wait.appear.error.dialog_SNAP-Error"/>
        <ProcedureCall id="_1rkI"
                       procedure="do_click.error_dialog.dialog_SNAP_Error.button_Yes"/>
        <CatchSequence exception="TestException" id="_1rkJ" maxerror="0"/>
      </TryStep>
      <TryStep id="_1rkK" name="click_Yes_in_SNAP_SNAP_error_dialog">
        <ProcedureCall id="_1rkL"
                       procedure="wait.appear.error.dialog_SNAP_SNAP_Error"/>
        <ProcedureCall id="_1rkM"
                       procedure="do_click.error_dialog.dialog_SNAP_SNAP_Error.button_OK"/>
        <CatchSequence exception="TestException" id="_1rkN" maxerror="0"/>
      </TryStep>
      <TryStep id="_1rkO" name="click_Yes_in_SNAP_error_dialog">
        <ProcedureCall id="_1rkP"
                       procedure="wait.appear.error.dialog_SNAP-Error"/>
        <ProcedureCall id="_1rkQ"
                       procedure="do_click.error_dialog.dialog_SNAP_Error.button_Yes"/>
        <CatchSequence exception="TestException" id="_1rkR" maxerror="0"/>
      </TryStep>
      <ProcedureCall id="_1qek" procedure="close.modal_dialogs"/>
      <ProcedureCall id="_1lDc"
                     procedure="qfs.swing.cleanup.closeAllModalDialogs">
        <variable name="maxDialogs">5</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure disabled="true" id="_Dju" name="select_pin_in_the_table">
      <ProcedureCall id="_Djv" procedure="opens.openPinDialog"/>
      <ProcedureCall id="_Djw" procedure="selects.select_one_pin_in_table">
        <variable name="pinNr">0</variable>
      </ProcedureCall>
      <ProcedureCall id="_Djx" procedure="closes.close_PIN_Manager"/>
    </Procedure>
    <Procedure disabled="true" id="_Dk9" name="select_pin_on_image_view">
      <TryStep id="_DkA" name="select_pin_on_image_view">
        <ProcedureCall id="_DkB" procedure="selects.pins_on_image_view">
          <variable name="prod_id">1</variable>
          <variable name="image_name">$(newBand1)</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_DkC" maxerror="0"/>
      </TryStep>
    </Procedure>
  </PackageRoot>
  <ExtraSequence id="_5">
    <Procedure id="_1piN" name="handle_invalid_input">
      <comment>@teststep handle_invalid_input</comment>
      <TryStep id="_1piO" postdelay="2000">
        <ProcedureCall id="_1piP"
                       procedure="wait.appear.error.dialog_Invalid_Input"/>
        <ProcedureCall id="_1piQ"
                       procedure="do_click.error_dialog.invalid_input.button_OK"/>
        <CatchSequence exception="TestException" id="_1piR" maxerror="0">
          <ProcedureCall id="_1piS" procedure="run-log.make_screensot">
            <variable name="iw_name">03_02_band_Math_double_band_name</variable>
            <variable name="iw_name_example">error_dialog</variable>
          </ProcedureCall>
          <ProcedureCall id="_1piT"
                         procedure="run-log.error_message.dialog_does_not_appear">
            <variable name="dialog">Invalid Input</variable>
          </ProcedureCall>
        </CatchSequence>
      </TryStep>
      <BasicSequence id="_1piU" name="todo_if_snap_will_work_stably">
        <ProcedureCall id="_1piV" postdelay="500"
                       procedure="do_click.error_dialog.band_maths.button_OK"/>
        <ProcedureCall id="_1piW" procedure="close.modal_dialogs"/>
      </BasicSequence>
    </Procedure>
    <ProcedureCall id="_1pXH" procedure="get.tree.get_index_of_node">
      <variable name="node">x</variable>
      <variable name="nodeSeparator">@</variable>
      <variable name="linear">false</variable>
    </ProcedureCall>
    <ServerScriptStep id="_1pXI" name="print">
      <code>print "$(new_band_id)"</code>
    </ServerScriptStep>
    <IfSequence id="_1pXJ" test="&#34;$(new_band_id)&#34;==&#34;&#34;">
      <ProcedureCall id="_1pXK" procedure="run-log.logError">
        <variable name="message">$(newBand) is not found</variable>
        <variable name="withScreenshots">true</variable>
      </ProcedureCall>
    </IfSequence>
    <TestCase disabled="true" id="_7ww"
              name="02_virtual_data_Landsat_k_mean_claster_analysis"
              reportname="02 Virtual data problem with Band Arithmetic Landsat k-mean claster analysis">
      <variable name="prod">LANDSAT 5 TM SCENE 20090115</variable>
      <variable name="newBand">test</variable>
      <variable name="kmeans_band">class_indices</variable>
      <variable name="expr">radiance_3</variable>
      <variable name="valid_expr">radiance_3.raw != 0.0</variable>
      <comment>Open a Landsat 5 TM product in VISAT&lt;br&gt;
Open the Band Arithmetic dialog, uncheck the 'Virtual...' option, define my expression and click the 'OK' button.&lt;br&gt;
A new band appeared in the Products View.&lt;br&gt;
Save the product, which implied conversion into BEAM DIMAP.&lt;br&gt;
Opened the K-means clustering, where define the source bands in the 'Processing Parameters' by selecting the applicable bands from the list.
</comment>
      <ProcedureCall id="_7wv" procedure="opens.openProduct_clickIcon">
        <variable name="fileName">LANDSAT/Landsat_5/fastTM/Australia/scene01/band1.dat</variable>
        <variable name="prodType">$(prodTypeAll)</variable>
        <comment>Open Product</comment>
      </ProcedureCall>
      <ProcedureCall id="_1kfC"
                     procedure="checks.checkProductNotOpened_return_prodNotOpened_variable"/>
      <IfSequence id="_1kfD"
                  test="&#34;$(prodNotOpened)&#34;==&#34;true&#34;">
        <TestStep id="_1kfE" name="wait" postdelay="5000"/>
      </IfSequence>
      <ProcedureCall id="_1kfF"
                     procedure="checks.checkProductNotOpened_return_prodNotOpened_variable"/>
      <IfSequence id="_1kfG"
                  test="&#34;$(prodNotOpened)&#34;==&#34;true&#34;">
        <TestStep id="_1kfH" name="wait" postdelay="6000"/>
      </IfSequence>
      <ProcedureCall id="_9QI" procedure="wait.product_is_opened_in_visat">
        <variable name="product_name">$(prod)</variable>
        <variable name="index">1</variable>
        <variable name="waiting_time">120000</variable>
      </ProcedureCall>
      <ProcedureCall id="_DjC"
                     procedure="checks.checkProductNotOpened_return_prodNotOpened_variable"/>
      <IfSequence id="_DjD" test="&#34;$(prodNotOpened)&#34;==&#34;true&#34;">
        <ProcedureCall id="_Djq" postdelay="12000"
                       procedure="wait.product_is_opened_in_visat">
          <variable name="product_name">$(prod)</variable>
          <variable name="index">1</variable>
          <variable name="waiting_time">120000</variable>
        </ProcedureCall>
      </IfSequence>
      <ProcedureCall id="_7wx"
                     procedure="checks.checkProductNotOpened_return_prodNotOpened_variable"/>
      <IfSequence id="_1kfM"
                  test="&#34;$(prodNotOpened)&#34;==&#34;true&#34;">
        <TestStep id="_1kfN" name="wait" postdelay="50000"/>
      </IfSequence>
      <ProcedureCall id="_1kfL"
                     procedure="checks.checkProductNotOpened_return_prodNotOpened_variable"/>
      <IfSequence id="_9QK" test="&#34;$(prodNotOpened)&#34;==&#34;true&#34;">
        <ProcedureCall id="_9QL"
                       procedure="scripts.error.product_can_not_be_opened">
          <variable name="product_name">LANDSAT/Australia/scene01/band1.dat</variable>
        </ProcedureCall>
        <ElseSequence id="_9QM">
          <ProcedureCall id="_9QJ"
                         procedure="checkProductTree.check_product_contains_metadata_bandClosed">
            <variable name="id">1</variable>
            <variable name="prodName">$(prod)</variable>
          </ProcedureCall>
          <TestStep id="_7xs" name="createNewBand">
            <ProcedureCall id="_7w+"
                           procedure="open.open_BandArithmeticTool"/>
            <ProcedureCall id="_7xF"
                           procedure="checks.bandMath_tool.targetProduct_comboBox">
              <variable name="product">$(prod)</variable>
              <variable name="prId">1</variable>
            </ProcedureCall>
            <ProcedureCall id="_7xn"
                           procedure="help.bandMath_tool.select_Virtual_option"/>
            <ProcedureCall id="_7xo"
                           procedure="help.bandMath_tool.insert_BandName">
              <variable name="bandName">$(newBand)</variable>
            </ProcedureCall>
            <ProcedureCall id="_7xp"
                           procedure="help.bandMath_tool.insert_Expression">
              <variable name="expression">$(expr)</variable>
            </ProcedureCall>
            <ProcedureCall id="_7xq" postdelay="6000"
                           procedure="clicks.bandMath_tool.ok"/>
          </TestStep>
          <TestStep id="_7y4" name="check">
            <ProcedureCall id="_7xw"
                           procedure="checkImageViewIsOpened.checkImageView">
              <variable name="product_id">1</variable>
              <variable name="image_view_title">$(newBand)</variable>
            </ProcedureCall>
            <ProcedureCall id="_7xx"
                           procedure="check_band.band_uncluded_in_product_tree">
              <variable name="prId">1</variable>
              <variable name="band">$(newBand)</variable>
              <variable name="product">/0/1/7</variable>
              <variable name="example_product">/0/1/7 (/product node/Bands node/band node)</variable>
            </ProcedureCall>
            <ProcedureCall id="_7y1"
                           procedure="checks.band_properties.virtual_band">
              <variable name="prId">1</variable>
              <variable name="product_name">$(prod)</variable>
              <variable name="validExp">$(valid_expr)</variable>
              <variable name="no_data">NaN</variable>
              <variable name="virtual_band">$(newBand)</variable>
              <variable name="vb_exp">$(expr)</variable>
              <variable name="use_no_data_selection">true</variable>
            </ProcedureCall>
          </TestStep>
          <ProcedureCall id="_3kf" postdelay="1000"
                         procedure="saves.saveProductAs">
            <variable name="output_file_name">test</variable>
            <variable name="dir">$(out_dir_bm)</variable>
          </ProcedureCall>
          <ProcedureCall id="_8fF"
                         procedure="wait.writting_BEAM-DIMAP_format_disappears"/>
          <TestStep id="_8XG" name="K-Means_Cluster_Analysis">
            <ProcedureCall id="_8XC"
                           procedure="open.openProcessorUI.open_K-Means_Cluster_Analysis"/>
            <ProcedureCall id="_8XD"
                           procedure="select.tab_Processing_Parameters"/>
            <ProcedureCall id="_8XE"
                           procedure="select.tab_Processing_Parameters.one_source_band">
              <variable name="source_band">$(newBand)</variable>
            </ProcedureCall>
            <ProcedureCall id="_8XF" postdelay="1000"
                           procedure="click.RUN_processor.K-Means_Cluster_Analysis"/>
            <ProcedureCall id="_8fZ"
                           procedure="wait.wait_dialogWriting_Target_Product_disappears"/>
            <TryStep id="_9n8"
                     name="handle_error_dialogVISAT_K_Means_Cluster_Analysis">
              <ProcedureCall id="_9n6"
                             procedure="../010_Data_Processors/02_ImageAnalysis/010_Data_Processors_02_ImageAnalysis_03_K_Means_Cluster.qft#wait.error_dialogVISAT_K_Means_Cluster_Analysis"/>
              <ProcedureCall id="_9n7"
                             procedure="../010_Data_Processors/02_ImageAnalysis/010_Data_Processors_02_ImageAnalysis_03_K_Means_Cluster.qft#click.OK_error_dialogVISAT_K_Means_Cluster_Analysis"/>
              <ProcedureCall id="_9nI"
                             procedure="closeProcessorUI.close_K-Means_Cluster_Analysis"/>
              <ProcedureCall id="_9nA"
                             procedure="scripts.error.dialog_appears">
                <variable name="dialog">Error dialog VISAT_-_K-Means_Cluster_Analysis...</variable>
              </ProcedureCall>
              <CatchSequence exception="TestException" id="_9n9"
                             maxerror="0"/>
            </TryStep>
            <TryStep id="_9nG" name="clickOKinInfoDialogSuccessfullyWritten">
              <ProcedureCall id="_8i0" predelay="2000"
                             procedure="click.clickOKinInfoDialogSuccessfullyWritten">
                <variable name="w">15000</variable>
              </ProcedureCall>
              <ProcedureCall id="_9nJ"
                             procedure="closeProcessorUI.close_K-Means_Cluster_Analysis"/>
              <ProcedureCall id="_9QP"
                             procedure="checks.checkProductName_return_prodOpened_variable">
                <variable name="product_name">$(newBand)_kmeans</variable>
                <variable name="index">2</variable>
              </ProcedureCall>
              <IfSequence id="_9nK"
                          test="&#34;$(prodOpened)&#34;==&#34;true&#34;">
                <ProcedureCall id="_6Vm" procedure="opens.openImageView">
                  <variable name="prodBand">[2] $(newBand)_kmeans/Bands/$(kmeans_band)</variable>
                </ProcedureCall>
                <ProcedureCall id="_8XQ"
                               procedure="checkImageViewIsOpened.checkImageView">
                  <variable name="product_id">2</variable>
                  <variable name="image_view_title">$(kmeans_band)</variable>
                </ProcedureCall>
              </IfSequence>
              <CatchSequence exception="TestException" id="_9nH" maxerror="0">
                <ProcedureCall id="_9nL"
                               procedure="scripts.error.product_is_not_opened_in_VISAT">
                  <variable name="product_name">$(newBand)_kmeans is not processed and </variable>
                </ProcedureCall>
              </CatchSequence>
            </TryStep>
          </TestStep>
          <ProcedureCall id="_9qd" procedure="close_modified_product"/>
        </ElseSequence>
      </IfSequence>
    </TestCase>
  </ExtraSequence>
  <WindowList id="_6"/>
</RootStep>
